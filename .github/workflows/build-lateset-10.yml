name: build 10 lateset releases

on:
  workflow_dispatch:
  schedule:
    - cron: '0 20 * * *'

jobs:
  prepare-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.set-matrix.outputs.versions }}
    steps:
      - name: Get last 10 release versions
        id: set-matrix
        run: |
          repo='docker/compose'
          versions=$(curl -s "https://api.github.com/repos/$repo/releases?per_page=10" | jq -r '.[].tag_name' | jq -R -s -c 'split("\n")[:-1]')
          echo "versions=$versions" >> $GITHUB_OUTPUT

  check-binaries:
    runs-on: ubuntu-latest
    needs: prepare-versions
    strategy:
      matrix:
        app: [compose]
        repo: ['docker/compose']
        version: ${{fromJson(needs.prepare-versions.outputs.versions)}}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Get Go Version and Set Env
        run: |
          APP_VERSION=${{ matrix.version }}
          GO_VERSION=$(curl -sSL https://github.com/${{ matrix.repo }}/raw/${APP_VERSION}/Dockerfile | grep '^ARG GO_VERSION=' | awk -F "=" '{print $2}')
          if [ -z "${APP_VERSION}" ] || [ "${APP_VERSION}" == "null" ] || [ -z "${GO_VERSION}" ] || [ "${GO_VERSION}" == "null" ]; then
            echo "Failed to get version or go version"
            exit 1
          fi
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
          echo "GO_VERSION=${GO_VERSION}" >> $GITHUB_ENV
          sed -i "s@ARG GO_VERSION=.*@ARG GO_VERSION=${GO_VERSION}@g" Dockerfile
          sed -i "s@ARG COMPOSE_VERSION=.*@ARG COMPOSE_VERSION=${APP_VERSION}@g" Dockerfile

      - name: Check Release
        id: check-release
        run: |
          gh release view ${{ env.APP_VERSION }} -R ${{ github.repository }} >/dev/null 2>&1 || echo "create=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Tag
        if: steps.check-release.outputs.create == '1'
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add .
          git commit -m "Release ${{ env.APP_VERSION }}" || true
          git tag ${{ env.APP_VERSION }}
          git push origin ${{ env.APP_VERSION }} || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.check-release.outputs.create == '1'
        run: |
          gh release create ${{ env.APP_VERSION }} -R ${{ github.repository }} --title ${{ env.APP_VERSION }} --notes "**Full Changelog**: [${{ env.APP_VERSION }}](https://github.com/docker/buildx/releases/tag/${{ env.APP_VERSION }})"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    runs-on: ubuntu-latest
    needs: check-binaries
    strategy:
      matrix:
        app: [compose]
        repo: ['docker/compose']
        version: ${{fromJson(needs.prepare-versions.outputs.versions)}}
    steps:
      - name: Checkout specific version
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.version }}

      - uses: docker/setup-buildx-action@v3

      - name: Check Release Assets
        id: create-binaries
        run: |
          gh release view ${{ matrix.version }} -R ${{ github.repository }} | grep ${{ matrix.app }}-.* >/dev/null 2>&1 || echo "create=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        if: steps.create-binaries.outputs.create == '1'
        run: docker run --rm --privileged ghcr.io/loong64/qemu-user-static --reset -p yes

      - name: Build Binaries
        if: steps.create-binaries.outputs.create == '1'
        run: |
          docker buildx build --platform linux/loong64 -t ${{ matrix.app }}-static-loong64:${{ matrix.version }} . --load

      - name: Upload Release Assets
        if: steps.create-binaries.outputs.create == '1'
        run: |
          docker run --rm -v $(pwd)/dist:/dist ${{ matrix.app }}-static-loong64:${{ matrix.version }}
          ls -al dist
          gh release upload ${{ matrix.version }} -R ${{ github.repository }} dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

